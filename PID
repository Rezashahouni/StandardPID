import matplotlib.pyplot as plt
import numpy as np

class PIDController:
    def __init__(self, Kp, Ki, Kd, setpoint):
        self.Kp = Kp
        self.Ki = Ki
        self.Kd = Kd
        self.setpoint = setpoint
        self.integral = 0
        self.previous_error = 0

    def update(self, process_variable, dt):
        error = self.setpoint - process_variable
        self.integral += error * dt
        derivative = (error - self.previous_error) / dt
        output = self.Kp * error + self.Ki * self.integral + self.Kd * derivative
        self.previous_error = error
        return output

# Simulation parameters
time = np.linspace(0, 10, 1000)  # 10 seconds, 1000 points
dt = time[1] - time[0]
setpoint = 5.0  # Desired setpoint

# PID parameters
Kp = 9.94389905e+00
Ki = 2.26101551e-03
Kd = 8.85155982e-01

# Initialize PID controller
pid = PIDController(Kp, Ki, Kd, setpoint)

# Process variables
process_variable = 0.0
process_values = []
setpoints = []

# Simulation loop
for t in time:
    control_signal = pid.update(process_variable, dt)
    process_variable += control_signal * dt  # Simple process model
    process_values.append(process_variable)
    setpoints.append(setpoint)

# Plotting the results
plt.figure(figsize=(10, 5))
plt.plot(time, process_values, label='Process Value')
plt.plot(time, setpoints, label='Setpoint', linestyle='--')
plt.xlabel('Time (min)')
plt.ylabel('Pressure Value')
plt.legend()
plt.grid(True)
plt.show()
